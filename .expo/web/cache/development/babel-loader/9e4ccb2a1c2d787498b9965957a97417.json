{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\MatchSite\\\\src\\\\pages\\\\ChatPage\\\\chatRoom.js\";\n\nimport React, { useEffect, Component } from 'react';\nimport { GiftedChat } from \"react-web-gifted-chat\";\nimport socketIOClient from \"socket.io-client\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nvar ENDPOINT = \"http://localhost:3000/\";\nvar APILINK = 'https://matchsitebackend.herokuapp.com/msg/get';\n\nfunction mysqlTimeStampToDate(timestamp) {\n  var regex = /^([0-9]{2,4})-([0-1][0-9])-([0-3][0-9])T(?:([0-2][0-9]):([0-5][0-9]):([0-5][0-9])).000Z?$/;\n  var parts = timestamp.replace(regex, \"$1 $2 $3 $4 $5 $6\").split(' ');\n  return new Date(parts[0], parts[1] - 1, parts[2], parts[3], parts[4], parts[5]);\n}\n\nvar styles = {\n  chat: {\n    display: \"flex\",\n    flex: 3,\n    flexDirection: \"column\",\n    borderWidth: \"1px\",\n    borderColor: \"#ccc\",\n    borderRightStyle: \"solid\",\n    borderLeftStyle: \"solid\"\n  }\n};\n\nvar ChatRoom = function ChatRoom(location) {\n  var _ref = location.state || {\n    user: \"aaa\",\n    to: \"bbb\"\n  },\n      user = _ref.user,\n      to = _ref.to,\n      userIcon = _ref.userIcon,\n      toIcon = _ref.toIcon;\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      msgs = _React$useState2[0],\n      setMsgs = _React$useState2[1];\n\n  var addMessage = function addMessage(msg) {\n    var newMsg = msgs.push([]);\n    setMsgs(newMsg);\n  };\n\n  var onSend = function onSend(msg) {\n    console.log(msg);\n  };\n\n  useEffect(function () {\n    var socket = socketIOClient(ENDPOINT);\n    socket.emit('join', user);\n    socket.on('message', function (msg) {\n      return addMessage(msg);\n    });\n\n    if (typeof window !== 'undefined') {\n      fetch('http://localhost:3000/msg/get', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          \"account\": user,\n          \"to\": to\n        })\n      }).then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        if (data.success) {\n          var fetchedMsgs = data.data.map(function (row, i) {\n            return {\n              id: i,\n              text: row.msg,\n              createdAt: mysqlTimeStampToDate(row.time),\n              user: {\n                id: row.userName,\n                name: row.userName,\n                avatar: row.userName === user ? userIcon : toIcon\n              }\n            };\n          });\n          console.log(fetchedMsgs);\n          setMsgs([]);\n        } else {\n          console.log('ERROR');\n        }\n      });\n    }\n\n    return function () {\n      return socket.disconnect();\n    };\n  }, []);\n\n  var genChat = function genChat() {\n    return React.createElement(GiftedChat, {\n      user: user,\n      messages: msgs,\n      onSend: function onSend(messages) {\n        return _this.onSend(messages);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    });\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, genChat());\n};\n\nexport default ChatRoom;","map":{"version":3,"sources":["D:/MatchSite/src/pages/ChatPage/chatRoom.js"],"names":["React","useEffect","Component","GiftedChat","socketIOClient","ENDPOINT","APILINK","mysqlTimeStampToDate","timestamp","regex","parts","replace","split","Date","styles","chat","display","flex","flexDirection","borderWidth","borderColor","borderRightStyle","borderLeftStyle","ChatRoom","location","state","user","to","userIcon","toIcon","useState","msgs","setMsgs","addMessage","msg","newMsg","push","onSend","console","log","socket","emit","on","window","fetch","method","headers","body","JSON","stringify","then","res","json","data","success","fetchedMsgs","map","row","i","id","text","createdAt","time","userName","name","avatar","disconnect","genChat","messages"],"mappings":"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","sourcesContent":["import React, {useEffect, Component } from 'react';\r\nimport { GiftedChat } from \"react-web-gifted-chat\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport { Text, View } from 'react-native';\r\n\r\nconst ENDPOINT = \"http://localhost:3000/\"\r\nconst APILINK = 'https://matchsitebackend.herokuapp.com/msg/get';\r\n\r\n\r\nfunction mysqlTimeStampToDate(timestamp) {\r\n    //function parses mysql datetime string and returns javascript Date object\r\n    //input has to be in this format: 2007-06-05 15:26:02\r\n    var regex=/^([0-9]{2,4})-([0-1][0-9])-([0-3][0-9])T(?:([0-2][0-9]):([0-5][0-9]):([0-5][0-9])).000Z?$/;\r\n    var parts=timestamp.replace(regex,\"$1 $2 $3 $4 $5 $6\").split(' ');\r\n    return new Date(parts[0],parts[1]-1,parts[2],parts[3],parts[4],parts[5]);\r\n}\r\n\r\nconst styles = {\r\n    chat: {\r\n        display: \"flex\",\r\n        flex: 3,\r\n        flexDirection: \"column\",\r\n        borderWidth: \"1px\",\r\n        borderColor: \"#ccc\",\r\n        borderRightStyle: \"solid\",\r\n        borderLeftStyle: \"solid\",\r\n      },\r\n}\r\n\r\nconst ChatRoom = (location) => {\r\n    const {user, to, userIcon, toIcon} = location.state || {user: \"aaa\", to: \"bbb\"};\r\n    const [msgs, setMsgs] = React.useState([]);\r\n\r\n    const addMessage = (msg) => {\r\n        const newMsg = msgs.push([]);\r\n        setMsgs(newMsg);\r\n    }\r\n\r\n    const onSend = (msg) => {\r\n        console.log(msg);\r\n\r\n        // if (typeof window !== 'undefined') {\r\n        //     fetch('http://localhost:3000/msg/get', {\r\n        //         method: 'PUT',\r\n        //         headers: {\r\n        //             'Accept': 'application/json',\r\n        //             'Content-Type': 'application/json'\r\n        //         },\r\n        //         body: JSON.stringify({\r\n        //             \"account\": user,\r\n        //             \"to\": to,\r\n        //             \"msg\": msg,\r\n        //         })\r\n        //         })\r\n        //         .then(res => res.json())\r\n        //         .then(data => {\r\n        //             if (data.success) {\r\n        //                 console.log('successfully added to db')\r\n        //             } else {\r\n        //                 console.log('ERROR')\r\n        //             }\r\n        //         })\r\n        // }\r\n    }\r\n    \r\n    useEffect(() => {\r\n        const socket = socketIOClient(ENDPOINT);\r\n        socket.emit('join', user);\r\n        socket.on('message', msg => addMessage(msg));\r\n        if (typeof window !== 'undefined') {\r\n            fetch('http://localhost:3000/msg/get', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    \"account\": user,\r\n                    \"to\": to,\r\n                })\r\n                })\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    if (data.success) {\r\n                        const fetchedMsgs = data.data.map((row, i) => {\r\n                            return {\r\n                                id: i,\r\n                                text: row.msg,\r\n                                createdAt: mysqlTimeStampToDate(row.time),\r\n                                user: {\r\n                                    id: row.userName,\r\n                                    name: row.userName,\r\n                                    avatar: row.userName === user ? userIcon : toIcon,\r\n                                }    \r\n                            }\r\n                        })\r\n                        console.log(fetchedMsgs);\r\n                        setMsgs([]);\r\n                    } else {\r\n                      console.log('ERROR')\r\n                    }})\r\n        }\r\n        return () => socket.disconnect();\r\n    }, [])\r\n\r\n    const genChat = () => {\r\n        return (<GiftedChat\r\n            user={user}\r\n            messages={msgs}\r\n            onSend={(messages)=> this.onSend(messages)}\r\n          />);\r\n    }\r\n    return (\r\n        <div>\r\n            {genChat()}\r\n        </div>)\r\n\r\n\r\n}\r\n\r\nexport default ChatRoom;"]},"metadata":{},"sourceType":"module"}