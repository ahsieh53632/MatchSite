{"ast":null,"code":"var _jsxFileName = \"D:\\\\MatchSite\\\\src\\\\pages\\\\ChatPage\\\\chatRoom.js\";\nimport React from 'react';\nimport { GiftedChat } from 'react-web-gifted-chat';\nimport socketIOClient from \"socket.io-client\";\nvar ENDPOINT = \"http://localhost:3000/\";\nvar APILINK = 'https://matchsitebackend.herokuapp.com/msg/get';\n\nfunction mysqlTimeStampToDate(timestamp) {\n  var regex = /^([0-9]{2,4})-([0-1][0-9])-([0-3][0-9])T(?:([0-2][0-9]):([0-5][0-9]):([0-5][0-9])).000Z?$/;\n  var parts = timestamp.replace(regex, \"$1 $2 $3 $4 $5 $6\").split(' ');\n  return new Date(parts[0], parts[1] - 1, parts[2], parts[3], parts[4], parts[5]);\n}\n\nvar ChatRoom = function ChatRoom(location) {\n  var _ref = location.state || {\n    user: \"aaa\",\n    to: \"bbb\"\n  },\n      user = _ref.user,\n      to = _ref.to,\n      userIcon = _ref.userIcon,\n      toIcon = _ref.toIcon;\n\n  var _React$useState = React.useState([]),\n      msgs = _React$useState.msgs,\n      setMsgs = _React$useState.setMsgs;\n\n  var addMessage = function addMessage(msg) {\n    var newMsg = msgs.push([]);\n    setMsgs(newMsg);\n  };\n\n  var onSend = function onSend(msg) {\n    console.log(msg);\n\n    if (typeof window !== 'undefined') {\n      fetch('http://localhost:3000/msg/get', {\n        method: 'PUT',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          \"account\": user,\n          \"to\": to,\n          \"msg\": msg\n        })\n      }).then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        if (data.success) {\n          console.log('successfully added to db');\n        } else {\n          console.log('ERROR');\n        }\n      });\n    }\n  };\n\n  React.useEffect(function () {\n    var socket = socketIOClient(ENDPOINT);\n    socket.emit('join', user);\n    socket.on('message', function (msg) {\n      return addMessage(msg);\n    });\n\n    if (typeof window !== 'undefined') {\n      fetch('http://localhost:3000/msg/get', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          \"account\": user,\n          \"to\": to\n        })\n      }).then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        if (data.success) {\n          var fetchedMsgs = data.data.map(function (row, i) {\n            return {\n              id: i,\n              text: row.msg,\n              createdAt: mysqlTimeStampToDate(row.time),\n              user: {\n                id: row.userName,\n                name: row.userName,\n                avatar: row.userName === user ? userIcon : toIcon\n              }\n            };\n          });\n          setMsgs(fetchedMsgs);\n        } else {\n          console.log('ERROR');\n        }\n      });\n    }\n\n    return function () {\n      return socket.disconnect();\n    };\n  }, []);\n  return React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, \"testing\");\n};\n\nexport default ChatRoom;","map":{"version":3,"sources":["D:/MatchSite/src/pages/ChatPage/chatRoom.js"],"names":["React","GiftedChat","socketIOClient","ENDPOINT","APILINK","mysqlTimeStampToDate","timestamp","regex","parts","replace","split","Date","ChatRoom","location","state","user","to","userIcon","toIcon","useState","msgs","setMsgs","addMessage","msg","newMsg","push","onSend","console","log","window","fetch","method","headers","body","JSON","stringify","then","res","json","data","success","useEffect","socket","emit","on","fetchedMsgs","map","row","i","id","text","createdAt","time","userName","name","avatar","disconnect"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { GiftedChat } from 'react-web-gifted-chat';\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nconst ENDPOINT = \"http://localhost:3000/\"\r\nconst APILINK = 'https://matchsitebackend.herokuapp.com/msg/get';\r\n\r\n\r\nfunction mysqlTimeStampToDate(timestamp) {\r\n    //function parses mysql datetime string and returns javascript Date object\r\n    //input has to be in this format: 2007-06-05 15:26:02\r\n    var regex=/^([0-9]{2,4})-([0-1][0-9])-([0-3][0-9])T(?:([0-2][0-9]):([0-5][0-9]):([0-5][0-9])).000Z?$/;\r\n    var parts=timestamp.replace(regex,\"$1 $2 $3 $4 $5 $6\").split(' ');\r\n    return new Date(parts[0],parts[1]-1,parts[2],parts[3],parts[4],parts[5]);\r\n}\r\n\r\n\r\nconst ChatRoom = (location) => {\r\n    const {user, to, userIcon, toIcon} = location.state || {user: \"aaa\", to: \"bbb\"};\r\n    const {msgs, setMsgs} = React.useState([]);\r\n\r\n    const addMessage = (msg) => {\r\n        const newMsg = msgs.push([]);\r\n        setMsgs(newMsg);\r\n    }\r\n\r\n    const onSend = (msg) => {\r\n        console.log(msg);\r\n\r\n        if (typeof window !== 'undefined') {\r\n            fetch('http://localhost:3000/msg/get', {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    \"account\": user,\r\n                    \"to\": to,\r\n                    \"msg\": msg,\r\n                })\r\n                })\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    if (data.success) {\r\n                        console.log('successfully added to db')\r\n                    } else {\r\n                        console.log('ERROR')\r\n                    }\r\n                })\r\n        }\r\n    }\r\n    \r\n    React.useEffect(() => {\r\n        const socket = socketIOClient(ENDPOINT);\r\n        socket.emit('join', user);\r\n        socket.on('message', msg => addMessage(msg));\r\n        if (typeof window !== 'undefined') {\r\n            fetch('http://localhost:3000/msg/get', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    \"account\": user,\r\n                    \"to\": to,\r\n                })\r\n                })\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    if (data.success) {\r\n                        var fetchedMsgs = data.data.map((row, i) => {\r\n                            return {\r\n                                id: i,\r\n                                text: row.msg,\r\n                                createdAt: mysqlTimeStampToDate(row.time),\r\n                                user: {\r\n                                    id: row.userName,\r\n                                    name: row.userName,\r\n                                    avatar: row.userName === user ? userIcon : toIcon,\r\n                                }    \r\n                            }\r\n                        })\r\n                        setMsgs(fetchedMsgs);\r\n                    } else {\r\n                      console.log('ERROR')\r\n                    }})\r\n        }\r\n        return () => socket.disconnect();\r\n    }, [])\r\n\r\n    return (<h1>testing</h1>)\r\n\r\n\r\n}\r\n\r\nexport default ChatRoom;"]},"metadata":{},"sourceType":"module"}