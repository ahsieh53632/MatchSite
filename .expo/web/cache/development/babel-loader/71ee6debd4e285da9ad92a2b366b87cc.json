{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\MatchSite\\\\src\\\\pages\\\\ChatPage\\\\chatRoom.js\";\nimport React, { useEffect, Component } from 'react';\nimport socketIOClient from \"socket.io-client\";\nimport ChatRoomHeader from './chatRoomHeader';\nimport { makeStyles } from '@material-ui/styles';\nimport MessageList from './MessageList';\nvar ENDPOINT = \"http://localhost:3000/\";\nvar APILINK = 'https://matchsitebackend.herokuapp.com/msg/get';\n\nfunction mysqlTimeStampToDate(timestamp) {\n  var regex = /^([0-9]{2,4})-([0-1][0-9])-([0-3][0-9])T(?:([0-2][0-9]):([0-5][0-9]):([0-5][0-9])).000Z?$/;\n  var parts = timestamp.replace(regex, \"$1 $2 $3 $4 $5 $6\").split(' ');\n  return new Date(parts[0], parts[1] - 1, parts[2], parts[3], parts[4], parts[5]);\n}\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    innerDiv: {\n      zIndex: '1',\n      boxSizing: 'border-box',\n      backgroundColor: 'white',\n      backgroundSize: 'auto 100%',\n      backgroundRepeat: 'no-repeat',\n      backgroundPosition: 'center center',\n      boxShadow: '0 12.5px 100px -10px rgba(90, 90, 90, 0.4), 0 10px 10px -10px rgba(90, 90, 90, 0.3)',\n      color: \"white\",\n      display: 'flex',\n      backgroundSize: '35vh 75vh'\n    }\n  };\n});\n\nvar ChatRoom = function ChatRoom(location) {\n  var _ref = location.state || {\n    user: \"aaa\",\n    to: \"bbb\"\n  },\n      user = _ref.user,\n      to = _ref.to,\n      userIcon = _ref.userIcon,\n      toIcon = _ref.toIcon;\n\n  var _React$useState = React.useState([{\n    id: 1,\n    text: 'Hello developer',\n    createdAt: new Date(),\n    user: {\n      id: 2,\n      name: 'React',\n      avatar: 'https://facebook.github.io/react/img/logo_og.png'\n    }\n  }]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      msgs = _React$useState2[0],\n      setMsgs = _React$useState2[1];\n\n  var addMessage = function addMessage(msg) {\n    var newMsg = msgs.push([]);\n    setMsgs(newMsg);\n  };\n\n  var onSend = function onSend(msg) {\n    console.log(msg);\n  };\n\n  useEffect(function () {\n    var socket = socketIOClient(ENDPOINT);\n    socket.emit('join', user);\n    socket.on('message', function (msg) {\n      return addMessage(msg);\n    });\n\n    if (typeof window !== 'undefined') {\n      fetch('http://localhost:3000/msg/get', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          \"account\": user,\n          \"to\": to\n        })\n      }).then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        if (data.success) {\n          var fetchedMsgs = data.data.map(function (row, i) {\n            return {\n              author: row.userName,\n              type: 'text',\n              text: row.msg,\n              data: {\n                text: row.msg\n              }\n            };\n          });\n          console.log(fetchedMsgs);\n          setMsgs(fetchedMsgs);\n        } else {\n          console.log('ERROR');\n        }\n      });\n    }\n\n    return function () {\n      return socket.disconnect();\n    };\n  }, []);\n  return React.createElement(React.Fragment, null, React.createElement(ChatRoomHeader, {\n    userName: user,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }, React.createElement(MessageList, {\n    messages: msgs,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default ChatRoom;","map":{"version":3,"sources":["D:/MatchSite/src/pages/ChatPage/chatRoom.js"],"names":["React","useEffect","Component","socketIOClient","ChatRoomHeader","makeStyles","MessageList","ENDPOINT","APILINK","mysqlTimeStampToDate","timestamp","regex","parts","replace","split","Date","useStyles","theme","innerDiv","zIndex","boxSizing","backgroundColor","backgroundSize","backgroundRepeat","backgroundPosition","boxShadow","color","display","ChatRoom","location","state","user","to","userIcon","toIcon","useState","id","text","createdAt","name","avatar","msgs","setMsgs","addMessage","msg","newMsg","push","onSend","console","log","socket","emit","on","window","fetch","method","headers","body","JSON","stringify","then","res","json","data","success","fetchedMsgs","map","row","i","author","userName","type","disconnect"],"mappings":"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","sourcesContent":["import React, {useEffect, Component } from 'react';\r\nimport socketIOClient from \"socket.io-client\";\r\nimport ChatRoomHeader from './chatRoomHeader';\r\nimport { makeStyles } from '@material-ui/styles'\r\nimport MessageList from './MessageList'\r\n\r\nconst ENDPOINT = \"http://localhost:3000/\"\r\nconst APILINK = 'https://matchsitebackend.herokuapp.com/msg/get';\r\n\r\n\r\nfunction mysqlTimeStampToDate(timestamp) {\r\n    //function parses mysql datetime string and returns javascript Date object\r\n    //input has to be in this format: 2007-06-05 15:26:02\r\n    var regex=/^([0-9]{2,4})-([0-1][0-9])-([0-3][0-9])T(?:([0-2][0-9]):([0-5][0-9]):([0-5][0-9])).000Z?$/;\r\n    var parts=timestamp.replace(regex,\"$1 $2 $3 $4 $5 $6\").split(' ');\r\n    return new Date(parts[0],parts[1]-1,parts[2],parts[3],parts[4],parts[5]);\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    innerDiv: {\r\n      zIndex: '1',  \r\n      boxSizing: 'border-box',\r\n      backgroundColor: 'white',\r\n      backgroundSize: 'auto 100%',\r\n      backgroundRepeat: 'no-repeat',\r\n      backgroundPosition: 'center center',\r\n      boxShadow: '0 12.5px 100px -10px rgba(90, 90, 90, 0.4), 0 10px 10px -10px rgba(90, 90, 90, 0.3)',\r\n      color: \"white\",\r\n      display: 'flex',\r\n      backgroundSize: '35vh 75vh',\r\n    },\r\n  }))\r\n\r\nconst ChatRoom = (location) => {\r\n    const {user, to, userIcon, toIcon} = location.state || {user: \"aaa\", to: \"bbb\"};\r\n    const [msgs, setMsgs] = React.useState([\r\n        {\r\n          id: 1,\r\n          text: 'Hello developer',\r\n          createdAt: new Date(),\r\n          user: {\r\n            id: 2,\r\n            name: 'React',\r\n            avatar: 'https://facebook.github.io/react/img/logo_og.png',\r\n          },\r\n        },\r\n      ],);\r\n\r\n    const addMessage = (msg) => {\r\n        const newMsg = msgs.push([]);\r\n        setMsgs(newMsg);\r\n    }\r\n\r\n    const onSend = (msg) => {\r\n        console.log(msg);\r\n\r\n        // if (typeof window !== 'undefined') {\r\n        //     fetch('http://localhost:3000/msg/get', {\r\n        //         method: 'PUT',\r\n        //         headers: {\r\n        //             'Accept': 'application/json',\r\n        //             'Content-Type': 'application/json'\r\n        //         },\r\n        //         body: JSON.stringify({\r\n        //             \"account\": user,\r\n        //             \"to\": to,\r\n        //             \"msg\": msg,\r\n        //         })\r\n        //         })\r\n        //         .then(res => res.json())\r\n        //         .then(data => {\r\n        //             if (data.success) {\r\n        //                 console.log('successfully added to db')\r\n        //             } else {\r\n        //                 console.log('ERROR')\r\n        //             }\r\n        //         })\r\n        // }\r\n    }\r\n    \r\n    useEffect(() => {\r\n        const socket = socketIOClient(ENDPOINT);\r\n        socket.emit('join', user);\r\n        socket.on('message', msg => addMessage(msg));\r\n        if (typeof window !== 'undefined') {\r\n            fetch('http://localhost:3000/msg/get', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    \"account\": user,\r\n                    \"to\": to,\r\n                })\r\n                })\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    if (data.success) {\r\n                        const fetchedMsgs = data.data.map((row, i) => {\r\n                            return {\r\n                                author: row.userName,\r\n                                type: 'text',\r\n                                text: row.msg,\r\n                                data: {\r\n                                    text: row.msg,\r\n                                }    \r\n                            }\r\n                        })\r\n                        console.log(fetchedMsgs);\r\n                        setMsgs(fetchedMsgs);\r\n                    } else {\r\n                      console.log('ERROR')\r\n                    }})\r\n        }\r\n        return () => socket.disconnect();\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <ChatRoomHeader userName={user} />\r\n            <div>\r\n                <MessageList messages={msgs}/>\r\n            </div>\r\n        </>\r\n        )\r\n\r\n\r\n}\r\n\r\nexport default ChatRoom;"]},"metadata":{},"sourceType":"module"}