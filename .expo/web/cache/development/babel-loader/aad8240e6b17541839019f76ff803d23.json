{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\MatchSite\\\\src\\\\pages\\\\ChatPage\\\\chatRoom.js\";\nimport React, { useEffect, Component } from 'react';\nimport socketIOClient from \"socket.io-client\";\nimport ChatRoomHeader from './chatRoomHeader';\nimport { makeStyles } from '@material-ui/styles';\nimport MessageList from './MessageList';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nvar ENDPOINT = \"http://localhost:3000/\";\nvar APILINK = 'https://matchsitebackend.herokuapp.com/msg/get';\n\nfunction mysqlTimeStampToDate(timestamp) {\n  console.log(timestamp);\n  var regex = /^([0-9]{2,4})-([0-1][0-9])-([0-3][0-9])T(?:([0-2][0-9]):([0-5][0-9]):([0-5][0-9])).000Z?$/;\n  var parts = timestamp.replace(regex, \"$1 $2 $3 $4 $5 $6\").split(' ');\n  return new Date(parts[0], parts[1] - 1, parts[2], parts[3], parts[4], parts[5]);\n}\n\nvar ChatRoom = function ChatRoom(location) {\n  var _ref = location.state || {\n    user: \"aaa\",\n    to: \"bbb\"\n  },\n      user = _ref.user,\n      to = _ref.to,\n      userIcon = _ref.userIcon,\n      toIcon = _ref.toIcon;\n\n  var _React$useState = React.useState([{\n    id: 1,\n    text: 'Hello developer',\n    createdAt: new Date(),\n    user: {\n      id: 2,\n      name: 'React',\n      avatar: 'https://facebook.github.io/react/img/logo_og.png'\n    }\n  }]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      msgs = _React$useState2[0],\n      setMsgs = _React$useState2[1];\n\n  var addMessage = function addMessage(msg) {\n    console.log(msg);\n    var newMsg = msgs.push([]);\n    setMsgs(newMsg);\n  };\n\n  var _onSend = function onSend(msg) {\n    console.log(msg);\n\n    if (typeof window !== 'undefined') {\n      fetch('http://localhost:3000/msg/post', {\n        method: 'PUT',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          \"account\": user,\n          \"to\": to,\n          \"msg\": msg\n        })\n      }).then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        if (data.success) {\n          console.log('successfully added to db');\n        } else {\n          console.log('ERROR');\n        }\n      });\n    }\n  };\n\n  useEffect(function () {\n    var socket = socketIOClient(ENDPOINT);\n    socket.emit('join', user);\n    socket.on('message', function (msg) {\n      return addMessage(msg);\n    });\n\n    if (typeof window !== 'undefined') {\n      fetch('http://localhost:3000/msg/get', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          \"account\": user,\n          \"to\": to\n        })\n      }).then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        if (data.success) {\n          var fetchedMsgs = data.data.map(function (row, i) {\n            return {\n              id: i,\n              author: row.userName,\n              message: row.msg,\n              timestamp: mysqlTimeStampToDate(row.time)\n            };\n          });\n          console.log(fetchedMsgs);\n          setMsgs(fetchedMsgs);\n        } else {\n          console.log('ERROR');\n        }\n      });\n    }\n\n    return function () {\n      return socket.disconnect();\n    };\n  }, []);\n  return React.createElement(React.Fragment, null, React.createElement(CssBaseline, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }), React.createElement(ChatRoomHeader, {\n    userName: user,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, React.createElement(MessageList, {\n    user: user,\n    messages: msgs,\n    onSend: function onSend(message) {\n      return _onSend(message);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default ChatRoom;","map":{"version":3,"sources":["D:/MatchSite/src/pages/ChatPage/chatRoom.js"],"names":["React","useEffect","Component","socketIOClient","ChatRoomHeader","makeStyles","MessageList","CssBaseline","ENDPOINT","APILINK","mysqlTimeStampToDate","timestamp","console","log","regex","parts","replace","split","Date","ChatRoom","location","state","user","to","userIcon","toIcon","useState","id","text","createdAt","name","avatar","msgs","setMsgs","addMessage","msg","newMsg","push","onSend","window","fetch","method","headers","body","JSON","stringify","then","res","json","data","success","socket","emit","on","fetchedMsgs","map","row","i","author","userName","message","time","disconnect"],"mappings":"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","sourcesContent":["import React, {useEffect, Component } from 'react';\r\nimport socketIOClient from \"socket.io-client\";\r\nimport ChatRoomHeader from './chatRoomHeader';\r\nimport { makeStyles } from '@material-ui/styles'\r\nimport MessageList from './MessageList'\r\nimport CssBaseline from '@material-ui/core/CssBaseline'\r\n\r\nconst ENDPOINT = \"http://localhost:3000/\"\r\nconst APILINK = 'https://matchsitebackend.herokuapp.com/msg/get';\r\n\r\n\r\nfunction mysqlTimeStampToDate(timestamp) {\r\n    //function parses mysql datetime string and returns javascript Date object\r\n    //input has to be in this format: 2007-06-05 15:26:02\r\n    console.log(timestamp);\r\n    var regex=/^([0-9]{2,4})-([0-1][0-9])-([0-3][0-9])T(?:([0-2][0-9]):([0-5][0-9]):([0-5][0-9])).000Z?$/;\r\n    var parts=timestamp.replace(regex,\"$1 $2 $3 $4 $5 $6\").split(' ');\r\n    return new Date(parts[0],parts[1]-1,parts[2],parts[3],parts[4],parts[5]);\r\n}\r\n\r\nconst ChatRoom = (location) => {\r\n    const {user, to, userIcon, toIcon} = location.state || {user: \"aaa\", to: \"bbb\"};\r\n    const [msgs, setMsgs] = React.useState([\r\n        {\r\n          id: 1,\r\n          text: 'Hello developer',\r\n          createdAt: new Date(),\r\n          user: {\r\n            id: 2,\r\n            name: 'React',\r\n            avatar: 'https://facebook.github.io/react/img/logo_og.png',\r\n          },\r\n        },\r\n      ],);\r\n\r\n    const addMessage = (msg) => {\r\n        console.log(msg);\r\n        const newMsg = msgs.push([]);\r\n        setMsgs(newMsg);\r\n    }\r\n\r\n    const onSend = (msg) => {\r\n        console.log(msg);\r\n\r\n        if (typeof window !== 'undefined') {\r\n            fetch('http://localhost:3000/msg/post', {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    \"account\": user,\r\n                    \"to\": to,\r\n                    \"msg\": msg,\r\n                })\r\n                })\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    if (data.success) {\r\n                        console.log('successfully added to db')\r\n                    } else {\r\n                        console.log('ERROR')\r\n                    }\r\n                })\r\n        }\r\n    }\r\n    \r\n    useEffect(() => {\r\n        const socket = socketIOClient(ENDPOINT);\r\n        socket.emit('join', user);\r\n        socket.on('message', msg => addMessage(msg));\r\n        if (typeof window !== 'undefined') {\r\n            fetch('http://localhost:3000/msg/get', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    \"account\": user,\r\n                    \"to\": to,\r\n                })\r\n                })\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    if (data.success) {\r\n                        const fetchedMsgs = data.data.map((row, i) => {\r\n                            return {\r\n                                id: i,\r\n                                author: row.userName,\r\n                                message: row.msg,\r\n                                timestamp: mysqlTimeStampToDate(row.time)\r\n                            }\r\n                        })\r\n                        console.log(fetchedMsgs);\r\n                        setMsgs(fetchedMsgs);\r\n                    } else {\r\n                      console.log('ERROR')\r\n                    }})\r\n        }\r\n        return () => socket.disconnect();\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <CssBaseline />\r\n            <ChatRoomHeader userName={user} />\r\n            <div>\r\n                <MessageList user={user} messages={msgs} onSend={(message) => onSend(message)}/>\r\n            </div>\r\n        </>\r\n        )\r\n\r\n\r\n}\r\n\r\nexport default ChatRoom;"]},"metadata":{},"sourceType":"module"}